import argparse
import os
import sys

# Add project root to sys.path to allow importing modules like data_generated
# This is a common workaround for complex imports, adjust if needed
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ''))
if project_root not in sys.path:
    sys.path.append(project_root)

# Import main functions from other scripts
from featured_generated import calculate_all_descriptors as run_generate_features
from train_predictive import train_classifier as run_train_classifier
from evaluate_predictive import evaluate_classifier as run_evaluate_classifier
from train import train_gan as run_train_gan
from generate_peptides import generate_and_filter_peptides as run_generate_peptides

# Define paths (can be centralized in a config.py if preferred)
DATA_DIR = 'data'
CLASSIFY_DATA_DIR = 'classify_data'
MODELS_DIR = 'models'
RESULTS_DIR = 'results'

GRAMPA_FILE = 'grampa.csv'
NEGATIVE_FILE = 'origin_negative.csv'
CLASSIFY_DATA_FILE = 'classify_data.csv'

PREDICTIVE_MODEL_FILE = 'predictive_model.pkl'
GENERATOR_MODEL_FILE = 'generator_model.pth'
DISCRIMINATOR_MODEL_FILE = 'discriminator_model.pth'

PREDICTIVE_EVAL_DIR = os.path.join(RESULTS_DIR, 'predictive_evaluation')
GENERATED_PEPTIDES_DIR = os.path.join(RESULTS_DIR, 'generated_peptides')


def main():
    parser = argparse.ArgumentParser(description='Peptide Generation Project Pipeline')
    parser.add_argument('--stage', type=str, default='all',
                        choices=['all', 'features', 'train_classifier', 'evaluate_classifier', 'train_gan', 'generate_peptides'],
                        help='Pipeline stage to run (default: all)')
    parser.add_argument('--epochs', type=int, default=500, help='Number of epochs for GAN training')
    parser.add_argument('--gan_batch_size', type=int, default=128, help='Batch size for GAN training')
    parser.add_argument('--num_generate', type=int, default=10000, help='Number of peptides to generate')
    parser.add_argument('--gen_batch_size', type=int, default=512, help='Batch size for peptide generation inference')
    # Add more arguments for other hyperparameters if needed

    args = parser.parse_args()

    print(f"Starting pipeline stage: {args.stage}")

    if args.stage in ['all', 'features']:
        print("\n--- Running Feature Generation ---")
        grampa_path = os.path.join(DATA_DIR, GRAMPA_FILE)
        negative_path = os.path.join(DATA_DIR, NEGATIVE_FILE)
        classify_output_dir = CLASSIFY_DATA_DIR
        # Ensure data files exist
        if not os.path.exists(grampa_path):
            print(f"Error: {grampa_path} not found.")
            sys.exit(1)
        if not os.path.exists(negative_path):
            print(f"Error: {negative_path} not found.")
            sys.exit(1)
        run_generate_features(grampa_path, negative_path, classify_output_dir)
        print("--- Feature Generation Complete ---")
        if args.stage == 'features':
            sys.exit(0)

    classify_data_path = os.path.join(CLASSIFY_DATA_DIR, CLASSIFY_DATA_FILE)
    if not os.path.exists(classify_data_path):
         print(f"Error: {classify_data_path} not found. Run --stage features first.")
         sys.exit(1)


    if args.stage in ['all', 'train_classifier']:
        print("\n--- Running Classifier Training ---")
        predictive_model_path = os.path.join(MODELS_DIR, PREDICTIVE_MODEL_FILE)
        run_train_classifier(classify_data_path, predictive_model_path, PREDICTIVE_EVAL_DIR)
        print("--- Classifier Training Complete ---")
        if args.stage == 'train_classifier':
            sys.exit(0)

    predictive_model_path = os.path.join(MODELS_DIR, PREDICTIVE_MODEL_FILE)
    # Need the test data generated by train_classifier for evaluation
    test_features_path = os.path.join(PREDICTIVE_EVAL_DIR, 'X_test.csv')
    test_labels_path = os.path.join(PREDICTIVE_EVAL_DIR, 'y_test.csv')


    if args.stage in ['all', 'evaluate_classifier']:
         print("\n--- Running Classifier Evaluation ---")
         # Ensure model and test data exist
         if not os.path.exists(predictive_model_path):
              print(f"Error: {predictive_model_path} not found. Run --stage train_classifier first.")
              sys.exit(1)
         if not os.path.exists(test_features_path) or not os.path.exists(test_labels_path):
              print(f"Error: Test data not found in {PREDICTIVE_EVAL_DIR}. Run --stage train_classifier first.")
              sys.exit(1)

         run_evaluate_classifier(predictive_model_path, test_features_path, test_labels_path, PREDICTIVE_EVAL_DIR)
         print("--- Classifier Evaluation Complete ---")
         if args.stage == 'evaluate_classifier':
              sys.exit(0)

    if args.stage in ['all', 'train_gan']:
        print("\n--- Running GAN Training ---")
        generator_model_path = os.path.join(MODELS_DIR, GENERATOR_MODEL_FILE)
        discriminator_model_path = os.path.join(MODELS_DIR, DISCRIMINATOR_MODEL_FILE)
        # Hyperparameters from train.py could be passed via args here if needed
        from train import NUM_EPOCHS, BATCH_SIZE as GAN_BATCH_SIZE, LR_G, LR_D, BETA1, D_TRAIN_RATIO, INITIAL_TEMP, MIN_TEMP, ANNEALING_STEPS # Load defaults

        run_train_gan(epochs=args.epochs, batch_size=args.gan_batch_size,
                      lr_g=LR_G, lr_d=LR_D, beta1=BETA1,
                      d_train_ratio=D_TRAIN_RATIO,
                      initial_temp=INITIAL_TEMP, min_temp=MIN_TEMP, annealing_steps=ANNEALING_STEPS,
                      generator_save_path=generator_model_path, discriminator_save_path=discriminator_model_path)
        print("--- GAN Training Complete ---")
        if args.stage == 'train_gan':
            sys.exit(0)

    generator_model_path = os.path.join(MODELS_DIR, GENERATOR_MODEL_FILE)
    if not os.path.exists(generator_model_path):
         print(f"Error: {generator_model_path} not found. Run --stage train_gan first.")
         sys.exit(1)

    # Ensure classifier model exists for filtering
    if not os.path.exists(predictive_model_path):
         print(f"Error: {predictive_model_path} not found. Run --stage train_classifier first.")
         sys.exit(1)


    if args.stage in ['all', 'generate_peptides']:
        print("\n--- Running Peptide Generation and Filtering ---")
        output_dir = GENERATED_PEPTIDES_DIR
        # Ensure descriptor calculation scripts are correctly implemented and imported in generate_peptides.py
        run_generate_peptides(generator_model_path, predictive_model_path, args.num_generate, args.gen_batch_size, output_dir)
        print("--- Peptide Generation and Filtering Complete ---")
        if args.stage == 'generate_peptides':
             sys.exit(0)

    print("\nPipeline finished.")


if __name__ == '__main__':
    main()